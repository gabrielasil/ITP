#include <stdio.h>
#include <stdlib.h>

typedef struct {
  int nlin, ncol;
  int **mat;
} Matrix;

Matrix* createMatrix(int nlin, int ncol){
    Matrix *aux = malloc(sizeof(Matrix));
    aux->nlin = nlin;
    aux->ncol = ncol;
    aux->mat = calloc(nlin, sizeof(int*));
    for(int i = 0; i < nlin; i++){
        aux->mat[i] = calloc(ncol, sizeof(int));
    }
    return aux;
}

void readMatrix(Matrix *m){
    for(int i = 0; i < m->nlin; i++){
        for(int j = 0; j < m->ncol; j++){
            scanf("%i", &m->mat[i][j]);
        }
    }
}

void printMatrix(Matrix *m){
    for(int i = 0; i < m->nlin; i++){
        for(int j = 0; j < m->ncol; j++){
            printf("%i ", m->mat[i][j]);
        }
        printf("\n");
    }
}

Matrix* doubleMatrix(Matrix *mat){
    Matrix *aux = malloc(sizeof(Matrix));
    aux->nlin = (2*mat->nlin)-1;
    aux->ncol = (2*mat->ncol)-1;
    aux->mat = calloc(aux->nlin, sizeof(int*));
    for(int i = 0; i < aux->nlin; i++){
        aux->mat[i] = calloc(aux->ncol, sizeof(int));
    }
    
    for(int i = 0; i < mat->nlin; i++){
        for(int j = 0; j < mat->ncol; j++){
            aux->mat[i*2][j*2] = mat->mat[i][j];
        }
    }
    
    for(int i = 0; i < aux->nlin; i++){
        for(int j = 0; j < aux->ncol; j++){
            if (i % 2 != 0 || j % 2 != 0){
                aux->mat[i][j] = (-1);
            }
        }
    }
    
     for(int i = 0; i < aux->nlin; i++){
        for(int j = 1; j < aux->ncol; j++){
            if (aux->mat[i][j] == -1){
                if(aux->mat[i][j-1] != -1 && aux->mat[i][j+1] != -1){
                    aux->mat[i][j] = (aux->mat[i][j+1] + aux->mat[i][j-1]) / 2;
                }
            }
            
        }
    }
    
    for(int i = 1; i < aux->nlin; i++){ //de cima p baixo
        for(int j = 0; j < aux->ncol; j++){
            if (aux->mat[i][j] == -1){
                if(aux->mat[i-1][j] != -1 && aux->mat[i+1][j] != -1){
                    aux->mat[i][j] = (aux->mat[i + 1][j] + aux->mat[i - 1][j]) / 2;
                }
            }
            
        }
    }
    return aux;
}

void destroyMatrix(Matrix **m){
    for(int i = 0; i < (*m)->nlin; i++){
        free((*m)->mat[i]);
    }
    free((*m)->mat);
    (*m)->mat = NULL;
    (*m)->nlin = NULL;
    (*m)->ncol = NULL;
    *m = NULL;
} 

int main(){
    int lin, col;
    Matrix* mat, *matDouble;
    
    scanf("%i %i", &lin, &col);
    mat = createMatrix(lin, col);
    readMatrix(mat);
    matDouble = doubleMatrix(mat);
    destroyMatrix(&mat);
    printMatrix(matDouble);
    destroyMatrix(&matDouble);

    return 0;
}