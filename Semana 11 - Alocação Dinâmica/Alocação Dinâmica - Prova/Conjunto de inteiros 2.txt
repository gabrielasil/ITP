#include <stdio.h>
#include <stdlib.h>

typedef unsigned int UINT;

typedef struct {
  UINT size;   // tamanho do array alocado para os elementos do conjunto
  UINT num;    // nÃºmero de elementos atualmente alocados
  int *array;  // array com os elementos
} Set;

Set* create(){
    Set *sAux = malloc(sizeof(Set));
    sAux->size = 10;
    sAux->num = 0;
    sAux->array = malloc(10 * sizeof(int));
    
    return sAux;
}

int has(Set *s, int value){
    for(int i = 0; i < s->num; i++){
        if(s->array[i] == value){
            return 1;
        }
    }
    return 0;
}
void add(Set *s, int value){
    if(s->num == s->size){
       int tamAux = s->size;
       tamAux = tamAux + 10;
       s->array = realloc(s->array, tamAux * sizeof(int));
       s->size = tamAux;
    }
    if(s->num != 0){
        int verify = has(s, value);
        if(verify == 0){
            s->array[s->num] = value;
            s->num++;
        }
    }else{
        s->array[s->num] = value;
        s->num++;
    }
    
    
}

Set* unionSet(Set *a, Set *b){
    Set *c = create();
    int verify = 1;
    for(int i = 0; i < a->num; i++){
        c->array[i] = a->array[i];
        c->num++;
    }
    
    for(int i = 0; i < b->num; i++){
        verify = has(c, b->array[i]);
        if(verify == 0){
            c->array[c->num] = b->array[i];
            c->num++;
        }
    }
    return c;
}

Set* interSet(Set *a, Set *b){
    Set *c = create();
    int verify = 1;
        for(int i = 0; i < a->num; i++){
            verify = has(b, a->array[i]);
            if(verify == 1){
                c->array[c->num] = a->array[i];
                c->num++;
            }
        }
    return c;

}
Set* diffSet(Set *a, Set *b){
    Set *c = create();
    int verify = 1;
        for(int i = 0; i < a->num; i++){
            verify = has(b, a->array[i]);
            if(verify == 0){
                c->array[c->num] = a->array[i];
                c->num++;
            }
        }
    return c;
}

void printSet(Set *a){
    for(int i = 0; i < a->num;i++){
        printf("%i ", a->array[i]);
    }
}

void clear(Set *a){
    free(a->array);
    a->size = NULL;
    a->num = NULL;
    a = NULL;
}

int main(){
    Set *s1, *s2, *sUnion, *sInter, *sDiff;
    s1 = create();
    
    s2 = create();
    
    int tam1 = 0, tam2 = 0, n = 0, verify = 0;
    
    scanf("%i", &tam1);
    for(int i = 0; i < tam1; i++){
        scanf("%i", &n);
        add(s1, n);
    }
    scanf("%i", &tam2);
    for(int i = 0; i < tam2; i++){
        scanf("%i", &n);
        add(s2, n);
    }
    
    sUnion = unionSet(s1, s2);
    printSet(sUnion);
    free(sUnion);
    printf("\n");
    
    sInter = interSet(s1, s2);
    printSet(sInter);
    free(sInter);
    printf("\n");
    
    sDiff = diffSet(s1, s2);
    printSet(sDiff);
    free(sDiff);
    
    return 0;
}